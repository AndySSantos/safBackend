# generated by fastapi-codegen:
#   filename:  safuamiAPI(1).yaml
#   timestamp: 2023-12-23T00:00:17+00:00

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import List, Optional
from uuid import UUID

from pydantic import BaseModel, EmailStr, Field, constr


class Profile(BaseModel):
    userId: Optional[str] = Field(None, description='Unique identifier for the given user.')
    user: str = Field(..., description='name user')
    email: EmailStr = Field(..., description='email account')
    emailVerified: bool = Field(
        ..., description="Set to true if the user's email has been verified."
    )
    lastUpgradeFace: Optional[date] = Field(None, description='date last upgrade face registry')


class Error(BaseModel):
    message: str = Field(
        ...,
        description='Mensaje amigable que describe el error',
        examples=['User not found'],
    )
    code: int = Field(
        ..., description='Código único asociado con el error', examples=[12]
    )
    
class StatusRequest(BaseModel):
    message: str = Field(
        ...,
        description='Mensaje amigable que describe el status',
        examples=['User not found'],
    )
    code: int = Field(
        ..., description='Código único asociado con el status HTML', examples=[12]
    )


class ProfileUpdate(BaseModel):
    userId: Optional[str] = Field(None, description='id user account')
    currentPassword: str = Field(..., description='cuttently password')
    newPassword: Optional[str] = Field(None, description='new password for account')
    newUser: Optional[str] = Field(None, description='new username')
    newEmail: Optional[str] = Field(None, description='new email for account')


class Credentials(BaseModel):
    email: EmailStr = Field(..., description='a mail given by UAM')
    password: str = Field(..., description='A Password associated with the email')


class TokenSession(BaseModel):
    token: str = Field(
        ..., description='Token contains information about the current user in the app'
    )
    userId: str = Field(..., description='id user')


class CodeVerification(BaseModel):
    code: constr(min_length=8, max_length=8) = Field(
        ..., description='Verificacion code of 8 characteres'
    )
class ResetPassword(BaseModel):
    code: str = Field(
        ..., description='Code of 8 characteres for auth change password'
    )
    password: str = Field(..., description='new password')
    
class StateTurnstile(Enum):
    OPEN = 'OPEN'
    CLOSED = 'CLOSED'
    IN_REPAIR = 'IN REPAIR'


class TurnstileUpdate(BaseModel):
    turnstileId: str = Field(..., description='id turnstile')
    newGate: Optional[int] = Field(None, description='gate tunstile')
    newLocation: Optional[str] = Field(None, description='location turnstile')
    uriPhoto: Optional[str] = Field(None, description='new url photho gate')
    state: Optional[StateTurnstile] = Field(None, description='update state tunstile')


class FaceRegitry(BaseModel):
    userId: str = Field(..., description='Id user')
    faceCaptured: bool = Field(
        ..., description='Indicates that the user has captured his or her face.'
    )
    lastUpgradeFace: date = Field(
        ..., description='Date of last update of the facial registry on the server'
    )


class SavePictures(BaseModel):
    userId: str = Field(..., description='Id user')
    compressedFile: str = Field(..., description='file compressed in format tar')


class AccessTurnstile(BaseModel):
    turnstileId: str = Field(..., description='Id turnstile for access processing')
    gate: int = Field(..., description='gate where the turnstile is located')


class Authentication(BaseModel):
    photo: str = Field(..., description='photo of user')
    userId: str = Field(..., description='id user')
    turnstileId: str = Field(..., description='turnstile id conected')


class StateAccess(Enum):
    Succesfull = 'Succesfull'
    Denied = 'Denied'
    Processing = 'Processing'


class ForgotPassword(BaseModel):
    email: str = Field(
        ...,
        description='An email exists in the system and is associated with an account.',
    )


class Turnstile(BaseModel):
    id: Optional[str] = Field(None, description='Id turnstile')
    gate: int = Field(..., description='gate where the turnstile is located')
    location: str = Field(..., description='location where the gate is located')
    urlPhoto: str = Field(..., description='photo of the gate')
    state: StateTurnstile = Field(..., description='state of the turnstile')


class Access(BaseModel):
    id: Optional[str] = None
    userId: str = Field(..., description='user Id ')
    turnstileId: str = Field(..., description='turnstile id conected')
    date: date = Field(..., description='date request')
    state: StateAccess = Field(..., description='state response')


class ElectronicTurnstiles(BaseModel):
    turnstiles: List[Turnstile] = Field(
        ..., description='All Electronics turnstiles with facial authentication enabled'
    )


class User(BaseModel):
    #id: Optional[str] = None
    name: str = Field(...,description='name user')
    email: constr(regex=r'^[a-zA-Z0-9._%+-]+@(titlani|xanum|izt)\.uam\.mx$') = Field(..., description='email user account')
    hashPassword: str = Field(...,description= 'password encrypt of user')
    saltPassword: Optional[str] = Field(None, description='salt code encrypt password')
    emailVerified: Optional[bool] = Field(False, description="Set to true if the user's email has been verified.") 
    codeVerification: Optional[str] = Field(None,description="Code send email account user")
    faceCaptured: Optional[bool] = Field(False,description='exist a registry facial')
    lastUpgradeFace: Optional[date] = Field(None, description='last update facial registry')
    
    
class Email(BaseModel):
    to: str = Field(..., description="To whom the email will be sent")
    subject: str = Field(...,description="Subject related to email")
    body: str = Field(..., description="Context email")
    