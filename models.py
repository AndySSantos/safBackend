# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2023-12-20T21:34:22+00:00

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import List, Optional
from uuid import UUID

from pydantic import BaseModel, Field, SecretStr, constr


class Profile(BaseModel):
    id: int = Field(..., description='Unique identifier for the given user.')
    user: str = Field(..., description='name user')
    email: str = Field(..., description='email account')
    emailVerified: bool = Field(
        ..., description="Set to true if the user's email has been verified."
    )
    lastUpgradeFace: date = Field(..., description='date last upgrade face registry')


class Error(BaseModel):
    menssage: str = Field(
        ...,
        description='Mensaje amigable que describe el error',
        example='User not found',
    )
    code: int = Field(..., description='Código único asociado con el error', example=12)


class Credentials(BaseModel):
    email: str = Field(..., description='a mail given by UAM')
    password: SecretStr = Field(..., description='A Password associated with the email')


class TokenUser(BaseModel):
    token: UUID = Field(
        ..., description='Token contains information about the current user in the app'
    )
    userId: int = Field(..., description='id user')


class CodeVerification(BaseModel):
    code: constr(max_length=8) = Field(
        ..., description='Verificacion code of 8 characteres'
    )


class StateTurnstile(Enum):
    OPEN = 'OPEN'
    CLOSED = 'CLOSED'
    IN_REPAIR = 'IN REPAIR'


class FaceRegitry(BaseModel):
    userId: int = Field(..., description='Id user')
    faceCaptured: bool = Field(
        ..., description='Indicates that the user has captured his or her face.'
    )
    lastUpgradeFace: date = Field(
        ..., description='Date of last update of the facial registry on the server'
    )


class SavePictures(BaseModel):
    userId: int = Field(..., description='Id user')
    compressedFile: str = Field(..., description='file compressed in format tar')


class Access(BaseModel):
    turnstileId: int = Field(..., description='Id turnstile for access processing')
    gate: int = Field(..., description='gate where the turnstile is located')


class Authentication(BaseModel):
    photo: str = Field(..., description='photo of user')
    userId: int = Field(..., description='id user')
    turnstileId: int = Field(..., description='turnstile id conected')


class StateAccess(Enum):
    Succesfull = 'Succesfull'
    Denied = 'Denied'
    Processing = 'Processing'


class ForgotPassword(BaseModel):
    email: str = Field(
        ...,
        description='An email exists in the system and is associated with an account.',
    )


class StateAccess2(Enum):
    Succesfull = 'Succesfull'
    Denied = 'Denied'
    Processing = 'Processing'


class StateTurnstile2(Enum):
    OPEN = 'OPEN'
    CLOSED = 'CLOSED'
    IN_REPAIR = 'IN REPAIR'


class UsersRequest(BaseModel):
    userId: int
    currentPassword: str
    newPassword: Optional[str] = None
    newUser: Optional[str] = None
    newEmail: Optional[str] = None


class UsersUserIdAccessGetResponse(Access):
    pass


class UsersUserIdAccessGetResponse1(Error):
    pass


class UsersUserIdAccessGetResponse2(Error):
    pass


class UsersUserIdAccessGetResponse3(Error):
    pass


class AccessTurnstileTurnstileIdUserUserIdPostRequest(Authentication):
    pass


class AccessTurnstileTurnstileIdUserUserIdPostResponse1(Error):
    pass


class AccessTurnstileTurnstileIdUserUserIdPostResponse2(Error):
    pass


class AccessTurnstileTurnstileIdUserUserIdPostResponse3(Error):
    pass


class AccessTurnstileTurnstileIdUserUserIdPostResponse4(Error):
    pass


class UsersUserIdGetResponse(Profile):
    pass


class UsersUserIdGetResponse1(Error):
    pass


class UsersUserIdGetResponse2(Error):
    pass


class UsersUserIdGetResponse3(Error):
    pass


class UsersUserIdPatchRequest(UsersRequest):
    pass


class UsersUserIdPatchResponse(Profile):
    pass


class UsersUserIdPatchResponse1(Error):
    pass


class UsersUserIdPatchResponse2(Error):
    pass


class UsersUserIdPatchResponse3(Error):
    pass


class UsersUserIdPatchResponse4(Error):
    pass


class UsersPostRequest(Credentials):
    pass


class UsersPostResponse(TokenUser):
    pass


class UsersPostResponse1(Error):
    pass


class UsersUserIdVerifyCodeConfirmationPostRequest(CodeVerification):
    pass


class UsersUserIdVerifyCodeConfirmationPostResponse(Error):
    pass


class UsersUserIdVerifyCodeConfirmationPostResponse1(Error):
    pass


class UsersUserIdVerifyCodeConfirmationPostResponse2(Error):
    pass


class UsersUserIdVerifyCodeConfirmationPostResponse3(Error):
    pass


class LoginPostRequest(Credentials):
    pass


class LoginPostResponse(TokenUser):
    pass


class LoginPostResponse1(Error):
    pass


class LoginPostResponse2(Error):
    pass


class LoginPostResponse3(Error):
    pass


class UsersUserIdPicturesGetResponse(FaceRegitry):
    pass


class UsersUserIdPicturesGetResponse1(Error):
    pass


class UsersUserIdPicturesPostRequest(SavePictures):
    pass


class UsersUserIdPicturesPostResponse(FaceRegitry):
    pass


class UsersUserIdPicturesPostResponse1(Error):
    pass


class UsersUserIdPicturesPostResponse2(Error):
    pass


class UsersUserIdPicturesPostResponse3(Error):
    pass


class UsersUserIdPicturesPostResponse4(Error):
    pass


class ForgotPasswordPostRequest(ForgotPassword):
    pass


class Turnstile(BaseModel):
    id: int = Field(..., description='Id turnstile')
    gate: int = Field(..., description='gate where the turnstile is located')
    location: str = Field(..., description='location where the gate is located')
    URLphoto: str = Field(..., description='photo of the gate')
    state: StateTurnstile2


class AccessTurnstile(BaseModel):
    userId: int = Field(..., description='user Id')
    turnstileId: int = Field(..., description='turnstile id conected')
    date: date = Field(..., description='date request')
    state: StateAccess2


class AccessTurnstileTurnstileIdUserUserIdPostResponse(AccessTurnstile):
    pass


class TurnstilesTurnstileIdGetResponse(Turnstile):
    pass


class ElectronicTurnstiles(BaseModel):
    turnstiles: List[Turnstile] = Field(
        ..., description='All Electronics turnstiles with facial authentication enabled'
    )


class TurnstilesGetResponse(ElectronicTurnstiles):
    pass
