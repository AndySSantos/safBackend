# generated by fastapi-codegen:
#   filename:  safuamiAPI(1).yaml
#   timestamp: 2023-12-23T00:00:17+00:00

from __future__ import annotations

from fastapi import APIRouter, BackgroundTasks, UploadFile, File

from dependencies import *

from services.user import *

router = APIRouter(tags=['user'])
import shutil
import os
import tarfile
import zipfile


@router.post('/forgotPassword', response_model=Union[TokenSession, Error], tags=['user'])
async def forgot_password(body: ForgotPassword = None) -> Union[TokenSession, Error]:
    """
    Reset password
    """
    return  reset_password(body)


@router.post(
    '/login',
    response_model=Union[TokenSession, Error],
    responses={
        '400': {'model': Error},
        '404': {'model': Error},
        '503': {'model': Error},
    },
    tags=['user'],
)
async def post_login(body: Credentials = None) -> Union[TokenSession, Error]:
    """
    Login
    """
    return login(body)


@router.post(
    '/users',
    response_model=Union[TokenSession, Error],
    responses={'400': {'model': Error}},
    tags=['user'],
)
async def create_account(body: Credentials = None) -> Union[TokenSession, Error]:
    """
    User registration
    """
    return create_user(body)


@router.get(
    '/users/{userId}',
    response_model= Union[Profile, Error],
    responses={
        '401': {'model': Error},
        '403': {'model': Error},
        '404': {'model': Error},
        '406': {'model': Error},
    },
    tags=['user'],
)
async def profile_user(
    userId: str = Path(..., alias='userId')
) -> Union[Profile, Error]:
    """
    Recover user
    """
    return profile(userId)


@router.delete(
    '/users/{userId}',
    response_model=Union[None, Error],
    responses={'400': {'model': Error}, '404': {'model': Error}},
    tags=['user'],
)
async def delete_user(
    userId: str = Path(..., alias='userId')
) -> Union[None, Error]:
    """
    Delete account
    """
    return delete_account(userId)


@router.patch(
    '/users/{userId}',
    response_model=Union[None,Error],
    responses={
        '401': {'model': Error},
        '403': {'model': Error},
        '404': {'model': Error},
    },
    tags=['user'],
)
def change_password(
    userId: str = Path(..., alias='userId'), body: ResetPassword = None
) -> Union[None, Error]:
    """
    Modify only password from User specific
    """
    return change_password_from_user(userId,body)


@router.put(
    '/users/{userId}',
    response_model=Union[Profile, Error],
    responses={
        '401': {'model': Error},
        '403': {'model': Error},
        '404': {'model': Error},
    },
    tags=['user'],
)
async def update_profile(
    userId: str = Path(..., alias='userId'), body: ProfileUpdate = None
) -> Union[Profile, Error]:
    """
    Update a user
    """
    return update_info_by_block(body,userId)



@router.get(
    '/users/{userId}/pictures',
    response_model=Union[FaceRegistry,Error],
    responses={'404': {'model': Error}},
    tags=['user'],
)
def find_face_registry(
    userId: str = Path(..., alias='userId')
) -> Union[FaceRegistry, Error]:
    """
    Existence of facial register
    """
    return facial_registry(userId)

@router.post(
    '/users/{userId}/pictures',
    response_model=Error,
    responses={
        201: {'model': FaceRegistry, 'description': 'Facial registration successful'},
        400: {'model': Error, 'description': 'Bad Request'},
        401: {'model': Error, 'description': 'Unauthorized'},
        403: {'model': Error, 'description': 'Forbidden'},
        404: {'model': Error, 'description': 'Not Found'},
    },
    tags=['user'],
)
async def facial_registry(userId: str = Path(..., alias='userId'),file: UploadFile = File(...))-> Error:
    
    return save_photos(userId,file)


@router.post(
    '/users/{userId}/sendConfirmationCode',
    response_model=Union[None,Error],
    responses={
        '401': {'model': Error},
        '403': {'model': Error},
        '404': {'model': Error},
    },
    tags=['user'],
)
def send_code(
    userId: str = Path(..., alias='userId')
) -> Union[None, Error]:
    """
    Send code confirmation email
    """
    #task = BackgroundTasks()
    #task.add_task(func=send_code_verification(userId))
    return send_code_verification(userId)#{"status":204,"body":"No content"}


@router.post(
    '/users/{userId}/verifyCodeConfirmation',
    response_model=None,
    responses={
        '400': {'model': Error},
        '401': {'model': Error},
        '403': {'model': Error},
        '404': {'model': Error},
    },
    tags=['user'],
)
def verify_code_confirmation(
    userId: str = Path(..., alias='userId'), body: CodeVerification = None
) -> Union[None, Error]:
    """
    Verication email
    """
    return verification_code(userId, body)


@router.get('/users',
            tags=['user'])
def get_users()->Error:
    return Error(message="Accion no valida", code=401)

"""
@router.post("/upload-zip")
async def upload_zip(file: UploadFile = File(...)):
    print(file.filename)
    return {"filename": file.filename, "content_type": file.content_type}
"""
@router.post("/users/{userId}/upload_file")
async def upload_file(userId: str = Path(..., alias='userId'),file: UploadFile = File(...)) -> Error:
   return save_photos(userId, file)


@router.post("/upload-image")
async def upload_image(file: UploadFile):
        # Ruta donde se guardarán las imágenes (ajústala según tus necesidades)
        upload_folder = PATH_STATIC
        
        # Asegurarse de que la carpeta exista, si no, créala
        #upload_folder.mkdir(parents=True, exist_ok=True)
        
        # Guardar la imagen con el mismo nombre que recibió en la solicitud
        # Ruta completa del archivo
        file_path = os.path.join(upload_folder, file.filename)

        # Guardar el archivo
        with open(file_path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)

        
        return {"message": "Imagen recibida y guardada correctamente", "file_path": str(file_path)}
    
"""upload_folder = PATH_DATASET

    # Verificar la extensión del archivo
    file_extension = file.filename.split(".")[-1]
    
    # Guardar el archivo en el servidor
    file_path = os.path.join(upload_folder, file.filename)
    with open(file_path, "wb") as f:
        f.write(file.file.read())

    # Descomprimir el archivo según su extensión
    if os.path.exists(f'{upload_folder}/{userId}'):
        shutil.rmtree(f'{upload_folder}/{userId}')
    os.makedirs(f'{upload_folder}/{userId}')
    
    if file_extension == "tar":
        with tarfile.open(file_path, "r") as tar:
            tar.extractall(f'{upload_folder}/{userId}')
    elif file_extension == "zip":
        with zipfile.ZipFile(file_path, "r") as zip_ref:
            zip_ref.extractall(f'{upload_folder}/{userId}')
            
    elif file_extension == "gz":
        with tarfile.open(file_path, "r:gz") as tar:
            tar.extractall(f'{upload_folder}/{userId}')

    return  Error(code=201, message= "File uploaded and extracted successfully")
"""