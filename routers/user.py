# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2023-12-20T21:34:22+00:00

from __future__ import annotations

from fastapi import APIRouter

from dependencies import *

router = APIRouter(tags=['user'])


@router.post('/forgotPassword', response_model=None, tags=['user'])
def post_forgot_password(body: ForgotPasswordPostRequest = None) -> None:
    """
    post-forgotPassword
    """
    pass


@router.post(
    '/login',
    response_model=LoginPostResponse,
    responses={
        '400': {'model': LoginPostResponse1},
        '404': {'model': LoginPostResponse2},
        '503': {'model': LoginPostResponse3},
    },
    tags=['user'],
)
def post_login(
    body: LoginPostRequest = None,
) -> Union[
    LoginPostResponse, LoginPostResponse1, LoginPostResponse2, LoginPostResponse3
]:
    """
    post-login
    """
    pass


@router.post(
    '/users',
    response_model=UsersPostResponse,
    responses={'400': {'model': UsersPostResponse1}},
    tags=['user'],
)
def post_user(
    body: UsersPostRequest = None,
) -> Union[UsersPostResponse, UsersPostResponse1]:
    """
    post-user
    """
    pass


@router.get(
    '/users/{user_id}',
    response_model=UsersUserIdGetResponse,
    responses={
        '401': {'model': UsersUserIdGetResponse1},
        '403': {'model': UsersUserIdGetResponse2},
        '404': {'model': UsersUserIdGetResponse3},
    },
    tags=['user'],
)
def get_users_user_id(user_id: int = Path(..., alias='userId')) -> Union[
    UsersUserIdGetResponse,
    UsersUserIdGetResponse1,
    UsersUserIdGetResponse2,
    UsersUserIdGetResponse3,
]:
    """
    get-users-userId
    """
    pass


@router.patch(
    '/users/{user_id}',
    response_model=UsersUserIdPatchResponse,
    responses={
        '401': {'model': UsersUserIdPatchResponse1},
        '403': {'model': UsersUserIdPatchResponse2},
        '404': {'model': UsersUserIdPatchResponse3},
        '409': {'model': UsersUserIdPatchResponse4},
    },
    tags=['user'],
)
def patch_users_user_id(
    user_id: int = Path(..., alias='userId'), body: UsersUserIdPatchRequest = None
) -> Union[
    UsersUserIdPatchResponse,
    UsersUserIdPatchResponse1,
    UsersUserIdPatchResponse2,
    UsersUserIdPatchResponse3,
    UsersUserIdPatchResponse4,
]:
    """
    patch-users-userId
    """
    pass


@router.get(
    '/users/{user_id}/pictures',
    response_model=UsersUserIdPicturesGetResponse,
    responses={'404': {'model': UsersUserIdPicturesGetResponse1}},
    tags=['user'],
)
def get_users_user_id_pictures(
    user_id: int = Path(..., alias='userId')
) -> Union[UsersUserIdPicturesGetResponse, UsersUserIdPicturesGetResponse1]:
    """
    get-users-userId-pictures
    """
    pass


@router.post(
    '/users/{user_id}/pictures',
    response_model=None,
    responses={
        '201': {'model': UsersUserIdPicturesPostResponse},
        '400': {'model': UsersUserIdPicturesPostResponse1},
        '401': {'model': UsersUserIdPicturesPostResponse2},
        '403': {'model': UsersUserIdPicturesPostResponse3},
        '404': {'model': UsersUserIdPicturesPostResponse4},
    },
    tags=['user'],
)
def post_users_user_id_pictures(
    user_id: int = Path(..., alias='userId'),
    body: UsersUserIdPicturesPostRequest = None,
) -> Union[
    None,
    UsersUserIdPicturesPostResponse,
    UsersUserIdPicturesPostResponse1,
    UsersUserIdPicturesPostResponse2,
    UsersUserIdPicturesPostResponse3,
    UsersUserIdPicturesPostResponse4,
]:
    """
    post-users-userId-pictures
    """
    pass


@router.post(
    '/users/{user_id}/sendConfirmationCode', response_model=None, tags=['user']
)
def post_users_user_id_send_confirmation_code(
    user_id: int = Path(..., alias='userId')
) -> None:
    """
    post-users-userId-sendConfirmationCode
    """
    pass


@router.post(
    '/users/{user_id}/verifyCodeConfirmation',
    response_model=None,
    responses={
        '400': {'model': UsersUserIdVerifyCodeConfirmationPostResponse},
        '401': {'model': UsersUserIdVerifyCodeConfirmationPostResponse1},
        '403': {'model': UsersUserIdVerifyCodeConfirmationPostResponse2},
        '404': {'model': UsersUserIdVerifyCodeConfirmationPostResponse3},
    },
    tags=['user'],
)
def post_users_user_id_verify_code_confirmation(
    user_id: int = Path(..., alias='userId'),
    body: UsersUserIdVerifyCodeConfirmationPostRequest = None,
) -> Union[
    None,
    UsersUserIdVerifyCodeConfirmationPostResponse,
    UsersUserIdVerifyCodeConfirmationPostResponse1,
    UsersUserIdVerifyCodeConfirmationPostResponse2,
    UsersUserIdVerifyCodeConfirmationPostResponse3,
]:
    """
    post-users-userId-verifyCodeConfirmation
    """
    pass
