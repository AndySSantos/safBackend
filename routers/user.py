# generated by fastapi-codegen:
#   filename:  safuamiAPI(1).yaml
#   timestamp: 2023-12-23T00:00:17+00:00

from __future__ import annotations

from fastapi import APIRouter, BackgroundTasks

from dependencies import *

from services.user import *

router = APIRouter(tags=['user'])


@router.post('/forgotPassword', response_model=Union[TokenSession, Error], tags=['user'])
async def forgot_password(body: ForgotPassword = None) -> Union[TokenSession, Error]:
    """
    Reset password
    """
    return  reset_password(body)


@router.post(
    '/login',
    response_model=Union[TokenSession, Error],
    responses={
        '400': {'model': Error},
        '404': {'model': Error},
        '503': {'model': Error},
    },
    tags=['user'],
)
async def post_login(body: Credentials = None) -> Union[TokenSession, Error]:
    """
    Login
    """
    return login(body)


@router.post(
    '/users',
    response_model=Union[TokenSession, Error],
    responses={'400': {'model': Error}},
    tags=['user'],
)
async def create_account(body: Credentials = None) -> Union[TokenSession, Error]:
    """
    User registration
    """
    return create_user(body)


@router.get(
    '/users/{userId}',
    response_model= Union[Profile, Error],
    responses={
        '401': {'model': Error},
        '403': {'model': Error},
        '404': {'model': Error},
        '406': {'model': Error},
    },
    tags=['user'],
)
async def profile_user(
    userId: str = Path(..., alias='userId')
) -> Union[Profile, Error]:
    """
    Recover user
    """
    return profile(userId)


@router.delete(
    '/users/{userId}',
    response_model=Union[None, Error],
    responses={'400': {'model': Error}, '404': {'model': Error}},
    tags=['user'],
)
async def delete_user(
    userId: str = Path(..., alias='userId')
) -> Union[None, Error]:
    """
    Delete account
    """
    return delete_account(userId)


@router.patch(
    '/users/{userId}',
    response_model=Union[None,Error],
    responses={
        '401': {'model': Error},
        '403': {'model': Error},
        '404': {'model': Error},
    },
    tags=['user'],
)
def change_password(
    userId: str = Path(..., alias='userId'), body: ResetPassword = None
) -> Union[None, Error]:
    """
    Modify only password from User specific
    """
    return change_password_from_user(userId,body)


@router.put(
    '/users/{userId}',
    response_model=Union[Profile, Error],
    responses={
        '401': {'model': Error},
        '403': {'model': Error},
        '404': {'model': Error},
    },
    tags=['user'],
)
async def update_profile(
    userId: str = Path(..., alias='userId'), body: ProfileUpdate = None
) -> Union[Profile, Error]:
    """
    Update a user
    """
    return update_info_by_block(body,userId)



@router.get(
    '/users/{userId}/pictures',
    response_model=FaceRegitry,
    responses={'404': {'model': Error}},
    tags=['user'],
)
def get_users_userId_pictures(
    userId: str = Path(..., alias='userId')
) -> Union[FaceRegitry, Error]:
    """
    Existence of facial register
    """
    pass


@router.post(
    '/users/{userId}/pictures',
    response_model=None,
    responses={
        '201': {'model': FaceRegitry},
        '400': {'model': Error},
        '401': {'model': Error},
        '403': {'model': Error},
        '404': {'model': Error},
    },
    tags=['user'],
)
def post_users_userId_pictures(
    userId: str = Path(..., alias='userId'), body: SavePictures = None
) -> Union[None, FaceRegitry, Error]:
    """
    Facial registration request
    """
    pass


@router.post(
    '/users/{userId}/sendConfirmationCode',
    response_model=Union[None,Error],
    responses={
        '401': {'model': Error},
        '403': {'model': Error},
        '404': {'model': Error},
    },
    tags=['user'],
)
def send_code(
    userId: str = Path(..., alias='userId')
) -> Union[None, Error]:
    """
    Send code confirmation email
    """
    #task = BackgroundTasks()
    #task.add_task(func=send_code_verification(userId))
    return send_code_verification(userId)#{"status":204,"body":"No content"}


@router.post(
    '/users/{userId}/verifyCodeConfirmation',
    response_model=None,
    responses={
        '400': {'model': Error},
        '401': {'model': Error},
        '403': {'model': Error},
        '404': {'model': Error},
    },
    tags=['user'],
)
def verify_code_confirmation(
    userId: str = Path(..., alias='userId'), body: CodeVerification = None
) -> Union[None, Error]:
    """
    Verication email
    """
    return verification_code(userId, body)


@router.get('/users')
def get_users():
    #return usersEntity(data_base.user.find())
    return "users"