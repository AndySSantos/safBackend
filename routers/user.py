# generated by fastapi-codegen:
#   filename:  safuamiAPI(1).yaml
#   timestamp: 2023-12-23T00:00:17+00:00

from __future__ import annotations

from fastapi import APIRouter

from dependencies import *

router = APIRouter(tags=['user'])


@router.post('/forgotPassword', response_model=None, tags=['user'])
def post_forgot_password(body: ForgotPassword = None) -> None:
    """
    Reset password
    """
    pass


@router.post(
    '/login',
    response_model=TokenSession,
    responses={
        '400': {'model': Error},
        '404': {'model': Error},
        '503': {'model': Error},
    },
    tags=['user'],
)
def post_login(body: Credentials = None) -> Union[TokenSession, Error]:
    """
    Login
    """
    pass


@router.post(
    '/users',
    response_model=TokenSession,
    responses={'400': {'model': Error}},
    tags=['user'],
)
def post_user(body: Credentials = None) -> Union[TokenSession, Error]:
    """
    User registration
    """
    pass


@router.get(
    '/users/{user_id}',
    response_model=Profile,
    responses={
        '401': {'model': Error},
        '403': {'model': Error},
        '404': {'model': Error},
    },
    tags=['user'],
)
def get_users_user_id(
    user_id: int = Path(..., alias='userId')
) -> Union[Profile, Error]:
    """
    Recover user
    """
    pass


@router.delete(
    '/users/{user_id}',
    response_model=None,
    responses={'400': {'model': Error}, '404': {'model': Error}},
    tags=['user'],
)
def delete_users_user_id(
    user_id: int = Path(..., alias='userId')
) -> Union[None, Error]:
    """
    Delete account
    """
    pass


@router.patch(
    '/users/{user_id}',
    response_model=Profile,
    responses={
        '401': {'model': Error},
        '403': {'model': Error},
        '404': {'model': Error},
    },
    tags=['user'],
)
def patch_users_user_id(
    user_id: int = Path(..., alias='userId'), body: ProfileUpdate = None
) -> Union[Profile, Error]:
    """
    Modify a User
    """
    pass


@router.put(
    '/users/{user_id}',
    response_model=Profile,
    responses={
        '401': {'model': Error},
        '403': {'model': Error},
        '404': {'model': Error},
    },
    tags=['user'],
)
def put_users_user_id(
    user_id: int = Path(..., alias='userId'), body: ProfileUpdate = None
) -> Union[Profile, Error]:
    """
    Update a user
    """
    pass


@router.get(
    '/users/{user_id}/pictures',
    response_model=FaceRegitry,
    responses={'404': {'model': Error}},
    tags=['user'],
)
def get_users_user_id_pictures(
    user_id: int = Path(..., alias='userId')
) -> Union[FaceRegitry, Error]:
    """
    Existence of facial register
    """
    pass


@router.post(
    '/users/{user_id}/pictures',
    response_model=None,
    responses={
        '201': {'model': FaceRegitry},
        '400': {'model': Error},
        '401': {'model': Error},
        '403': {'model': Error},
        '404': {'model': Error},
    },
    tags=['user'],
)
def post_users_user_id_pictures(
    user_id: int = Path(..., alias='userId'), body: SavePictures = None
) -> Union[None, FaceRegitry, Error]:
    """
    Facial registration request
    """
    pass


@router.post(
    '/users/{user_id}/sendConfirmationCode',
    response_model=None,
    responses={
        '401': {'model': Error},
        '403': {'model': Error},
        '404': {'model': Error},
    },
    tags=['user'],
)
def post_users_user_id_send_confirmation_code(
    user_id: int = Path(..., alias='userId')
) -> Union[None, Error]:
    """
    Send code confirmation email
    """
    pass


@router.post(
    '/users/{user_id}/verifyCodeConfirmation',
    response_model=None,
    responses={
        '400': {'model': Error},
        '401': {'model': Error},
        '403': {'model': Error},
        '404': {'model': Error},
    },
    tags=['user'],
)
def post_users_user_id_verify_code_confirmation(
    user_id: int = Path(..., alias='userId'), body: CodeVerification = None
) -> Union[None, Error]:
    """
    Verication email
    """
    pass
